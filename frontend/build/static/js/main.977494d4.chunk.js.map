{"version":3,"sources":["VideoList.js","VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","_this2","fetch","then","response","json","console","log","setState","react_default","a","createElement","className","map","value","index","key","react_router_dom","to","concat","uri","src","poster_uri","alt","title","React","Component","VideoDetail","location","search","searchParams","URLSearchParams","get","Fragment","controls","autoPlay","Topics","_ref2","match","url","react_router","path","component","Topic","exact","render","_ref3","params","topicId","BasicExample","VideoList","Boolean","window","hostname","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.977494d4.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Link } from \"react-router-dom\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('/api')\n      .then(response => response.json())\n      .then(data => { \n        console.log('response', data);\n        this.setState({ data });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.data.map((value, index) => {\n          return (\n            <div key={index}>\n              <Link to={`/watch?v=${value.uri}`}>\n                <img src={value.poster_uri} alt={value.title} />\n                <p>{value.title}</p>\n              </Link>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './App.css';\n\nclass VideoDetail extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log('dd', props.location.search);\n    const searchParams = new URLSearchParams(props.location.search);\n    console.log('video detail', searchParams.get('v'));\n  }\n\n  // componentDidMount() {\n  //   fetch('/api')\n  //     .then(response => response.json())\n  //     .then(data => { \n  //       console.log('response', data);\n  //       this.setState({ data });\n  //     });\n  // }\n\n  render() {\n    const searchParams = new URLSearchParams(this.props.location.search);\n    return (\n      <>\n        <video controls autoPlay>\n          <source src={searchParams.get('v')} />\n        </video>\n      </>\n    );\n  }\n}\n\nexport default VideoDetail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\nfunction BasicExample() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={VideoList} />\n        <Route path=\"/watch\" component={VideoDetail} />\n        <Route path=\"/topics\" component={Topics} />\n      </div>\n    </Router>\n  );\n}\n\nfunction About({ match }) {\n  console.log('location', match);\n  return (\n    <div>\n      <h2>About, { decodeURIComponent(match.params.path) }</h2>\n    </div>\n  );\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:topicId`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Topic({ match }) {\n  return (\n    <div>\n      <h3>{match.params.topicId}</h3>\n    </div>\n  );\n}\n\nexport default BasicExample;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}