{"version":3,"sources":["VideoList.js","VideoDetail.js","App.js","serviceWorker.js","index.js"],"names":["VideoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCheckUpdate","fetch","then","response","json","data","setState","state","_this2","console","log","react_default","a","createElement","style","marginTop","textAlign","onClick","className","map","value","index","uri","poster_uri","title","id","key","react_router_dom","to","concat","src","alt","React","Component","VideoDetail","handleDeleteButtonClicked","window","confirm","URLSearchParams","location","search","get","method","history","goBack","searchParams","Fragment","controls","autoPlay","Topics","_ref2","match","url","react_router","path","component","Topic","exact","render","_ref3","params","topicId","BasicExample","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a87985f4.chunk.js","sourcesContent":["import React from 'react';\nimport './VideoList.css';\nimport { Link } from \"react-router-dom\";\n\nclass VideoList extends React.Component {\n\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch('/api')\n      .then(response => response.json())\n      .then(data => { \n        console.log('response', data);\n        this.setState({ data });\n      });\n  }\n\n  handleCheckUpdate = () => {\n    fetch('/api?is_check=true')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({ data });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ marginTop: 16, textAlign: 'center' }}>\n          <button onClick={this.handleCheckUpdate}>检查更新</button>\n        </div>\n        <div className=\"VideoList\">\n          {this.state.data.map((value, index) => {\n            const { uri, poster_uri, title, id } = value;\n            return (\n              <div key={index}>\n                <Link className=\"VideoList__link\" to={`/watch?v=${uri}&id=${id}`}>\n                  <img src={poster_uri} alt={title} />\n                  <p className=\"VideoList__title\">{title}</p>\n                </Link>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default VideoList;\n","import React from 'react';\nimport './App.css';\n\nclass VideoDetail extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log('dd', props.location.search);\n    const searchParams = new URLSearchParams(props.location.search);\n    console.log('video detail', searchParams.get('v'));\n  }\n\n  // componentDidMount() {\n  //   fetch('/api')\n  //     .then(response => response.json())\n  //     .then(data => { \n  //       console.log('response', data);\n  //       this.setState({ data });\n  //     });\n  // }\n\n  handleDeleteButtonClicked = () => {\n    if (window.confirm(\"Are you sure to delete this video?\")) { \n      const searchParams = new URLSearchParams(this.props.location.search);\n      const id = searchParams.get('id');\n      fetch(`/api/videos/${id}`, {\n        method: 'DELETE'\n      }).then(() => {\n        this.props.history.goBack();\n      });\n    }\n  }\n\n  render() {\n    const searchParams = new URLSearchParams(this.props.location.search);\n    return (\n      <>\n        <video controls autoPlay>\n          <source src={searchParams.get('v')} />\n        </video>\n        <button onClick={this.handleDeleteButtonClicked}>Delete</button>\n      </>\n    );\n  }\n}\n\nexport default VideoDetail;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport VideoList from './VideoList';\nimport VideoDetail from './VideoDetail';\n\nfunction BasicExample() {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={VideoList} />\n        <Route path=\"/watch\" component={VideoDetail} />\n        <Route path=\"/topics\" component={Topics} />\n      </div>\n    </Router>\n  );\n}\n\nfunction About({ match }) {\n  console.log('location', match);\n  return (\n    <div>\n      <h2>About, { decodeURIComponent(match.params.path) }</h2>\n    </div>\n  );\n}\n\nfunction Topics({ match }) {\n  return (\n    <div>\n      <h2>Topics</h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/rendering`}>Rendering with React</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li>\n          <Link to={`${match.url}/props-v-state`}>Props v. State</Link>\n        </li>\n      </ul>\n\n      <Route path={`${match.path}/:topicId`} component={Topic} />\n      <Route\n        exact\n        path={match.path}\n        render={() => <h3>Please select a topic.</h3>}\n      />\n    </div>\n  );\n}\n\nfunction Topic({ match }) {\n  return (\n    <div>\n      <h3>{match.params.topicId}</h3>\n    </div>\n  );\n}\n\nexport default BasicExample;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}